name: Create Bootstrap Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'New repository name'
        required: true
        type: string
      repo_owner:
        description: 'Repository owner (user/org)'
        required: false
        type: string
      repo_description:
        description: 'Repository description'
        required: false
        default: 'Repository following SOLID principles and best practices'
        type: string
      visibility:
        description: 'Repository visibility'
        required: false
        default: 'private'
        type: choice
        options:
          - private
          - public
      enable_branch_protection:
        description: 'Enable branch protection rules'
        required: false
        default: true
        type: boolean
      team_name:
        description: 'GitHub team for code owners (e.g., org/team-leads)'
        required: false
        default: '* @team-leads'
        type: string
      license_holder:
        description: 'License copyright holder name'
        required: false
        type: string
      primary_language:
        description: 'Primary programming language for super-linter configuration'
        required: false
        default: 'multi-language'
        type: choice
        options:
          - multi-language
          - javascript
          - typescript
          - python
          - java
          - go
          - rust
          - ruby
          - php
          - csharp
          - cpp

jobs:
  create-repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write

    steps:
      - name: Checkout bootstrap repository
        uses: actions/checkout@v5

      - name: Set repository owner
        id: set-owner
        run: |
          if [ -z "${{ github.event.inputs.repo_owner }}" ]; then
            echo "owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          else
            echo "owner=${{ github.event.inputs.repo_owner }}" >> $GITHUB_OUTPUT
          fi

      - name: Set license holder
        id: set-license
        run: |
          if [ -z "${{ github.event.inputs.license_holder }}" ]; then
            echo "holder=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          else
            echo "holder=${{ github.event.inputs.license_holder }}" >> $GITHUB_OUTPUT
          fi

      - name: Create new repository
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /user/repos \
            -f name="${{ github.event.inputs.repo_name }}" \
            -f description="${{ github.event.inputs.repo_description }}" \
            -f private=${{ github.event.inputs.visibility == 'private' }} \
            -f has_issues=true \
            -f has_projects=true \
            -f has_wiki=false \
            -f auto_init=true

      - name: Wait for repository initialization
        run: sleep 5

      - name: Clone new repository
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git clone https://x-access-token:${GH_TOKEN}@github.com/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }}.git new-repo
          cd new-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Copy template files
        run: |
          cp -r templates/* new-repo/
          cp -r templates/.github new-repo/
          cp templates/.editorconfig new-repo/
          cp templates/.gitignore new-repo/
          cp templates/.gitattributes new-repo/
          cp templates/.super-linter.env new-repo/
          
      - name: Update CODEOWNERS with team name
        run: |
          cd new-repo
          sed -i "s/@team-leads/${{ github.event.inputs.team_name }}/g" .github/CODEOWNERS

      - name: Update LICENSE with current year and holder
        run: |
          cd new-repo
          CURRENT_YEAR=$(date +%Y)
          sed -i "s/\[year\]/$CURRENT_YEAR/g" LICENSE
          sed -i "s/\[fullname\]/${{ steps.set-license.outputs.holder }}/g" LICENSE

      - name: Configure super-linter for primary language
        run: |
          cd new-repo
          LANG="${{ github.event.inputs.primary_language }}"
          
          # Set all languages to false by default
          sed -i "s/ENABLE_JAVASCRIPT_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_TYPESCRIPT_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_PYTHON_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_JAVA_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_GO_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_RUST_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_RUBY_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_PHP_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_CSHARP_VALUE/false/g" .super-linter.env
          sed -i "s/ENABLE_CPP_VALUE/false/g" .super-linter.env
          
          # Enable the selected language or all for multi-language
          case "$LANG" in
            "javascript")
              sed -i "s/ENABLE_JAVASCRIPT=false/ENABLE_JAVASCRIPT=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/JavaScript/g" .super-linter.env
              ;;
            "typescript")
              sed -i "s/ENABLE_TYPESCRIPT=false/ENABLE_TYPESCRIPT=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/TypeScript/g" .super-linter.env
              ;;
            "python")
              sed -i "s/ENABLE_PYTHON=false/ENABLE_PYTHON=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Python/g" .super-linter.env
              ;;
            "java")
              sed -i "s/ENABLE_JAVA=false/ENABLE_JAVA=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Java/g" .super-linter.env
              ;;
            "go")
              sed -i "s/ENABLE_GO=false/ENABLE_GO=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Go/g" .super-linter.env
              ;;
            "rust")
              sed -i "s/ENABLE_RUST=false/ENABLE_RUST=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Rust/g" .super-linter.env
              ;;
            "ruby")
              sed -i "s/ENABLE_RUBY=false/ENABLE_RUBY=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Ruby/g" .super-linter.env
              ;;
            "php")
              sed -i "s/ENABLE_PHP=false/ENABLE_PHP=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/PHP/g" .super-linter.env
              ;;
            "csharp")
              sed -i "s/ENABLE_CSHARP=false/ENABLE_CSHARP=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/C#/g" .super-linter.env
              ;;
            "cpp")
              sed -i "s/ENABLE_CPP=false/ENABLE_CPP=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/C++/g" .super-linter.env
              ;;
            "multi-language")
              sed -i "s/ENABLE_JAVASCRIPT=false/ENABLE_JAVASCRIPT=true/g" .super-linter.env
              sed -i "s/ENABLE_TYPESCRIPT=false/ENABLE_TYPESCRIPT=true/g" .super-linter.env
              sed -i "s/ENABLE_PYTHON=false/ENABLE_PYTHON=true/g" .super-linter.env
              sed -i "s/ENABLE_JAVA=false/ENABLE_JAVA=true/g" .super-linter.env
              sed -i "s/ENABLE_GO=false/ENABLE_GO=true/g" .super-linter.env
              sed -i "s/ENABLE_RUST=false/ENABLE_RUST=true/g" .super-linter.env
              sed -i "s/ENABLE_RUBY=false/ENABLE_RUBY=true/g" .super-linter.env
              sed -i "s/ENABLE_PHP=false/ENABLE_PHP=true/g" .super-linter.env
              sed -i "s/ENABLE_CSHARP=false/ENABLE_CSHARP=true/g" .super-linter.env
              sed -i "s/ENABLE_CPP=false/ENABLE_CPP=true/g" .super-linter.env
              sed -i "s/PRIMARY_LANGUAGE_PLACEHOLDER/Multi-Language/g" .super-linter.env
              ;;
          esac

      - name: Commit and push files
        run: |
          cd new-repo
          git add .
          git commit -m "chore: initialize repository from bootstrap template"
          git push

      - name: Configure repository settings
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }} \
            --input ".github/config/repo-settings.json"

      - name: Create dev environment
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }}/environments/dev \
            -F prevent_self_review=false

      - name: Create prod environment
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }}/environments/prod \
            -F prevent_self_review=true

      - name: Apply branch protection rules
        if: ${{ github.event.inputs.enable_branch_protection }}
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          sleep 3
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }}/branches/main/protection \
            --input ".github/config/branch-protection.json"

      - name: Summary
        run: |
          echo "✅ Repository created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** https://github.com/${{ steps.set-owner.outputs.owner }}/${{ github.event.inputs.repo_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Visibility:** ${{ github.event.inputs.visibility }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Protection:** ${{ github.event.inputs.enable_branch_protection }}" >> $GITHUB_STEP_SUMMARY
          echo "**Primary Language:** ${{ github.event.inputs.primary_language }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Created Resources" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CODEOWNERS" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependabot configuration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Branch protection rules" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Development environment" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Production environment" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ .editorconfig (4 spaces code, 2 spaces config)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ .gitignore, .gitattributes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documentation templates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ LICENSE (MIT)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Super-Linter workflow (auto-fix on PRs)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Super-Linter configuration (.super-linter.env)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Makefile (run 'make lint' locally)" >> $GITHUB_STEP_SUMMARY
