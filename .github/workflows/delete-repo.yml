---
name: Delete repository

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Type the full repository name (owner/repo) to confirm deletion"
        required: true
        type: string
      force:
        description: "Set to true to actually delete the repository. If false, the workflow will run as a dry-run."
        required: false
        default: "false"
        type: boolean

jobs:
  delete-repo:
    runs-on: ubuntu-latest
    # This workflow uses a personal access token (GH_PAT) with repo deletion permissions.
    # Create a secret named GH_PAT with `delete_repo` scope (or an admin token) in the repository where you run this.
    steps:
      - name: Dry-run check
        run: |
          if [ "${{ github.event.inputs.force }}" != "true" ]; then
            echo "Force flag is not set. This is a dry run. No deletion will occur."
            echo "To actually delete, re-run the workflow and set 'force' to true."
            exit 0
          fi

      - name: Delete repository via REST API
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          REPO_FULL: ${{ inputs.repo }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "GH_PAT secret is missing. Please create a repository secret named GH_PAT with delete_repo permission."
            exit 1
          fi

          echo "Deleting repository: $REPO_FULL"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO_FULL")

          if [ "$HTTP_STATUS" = "204" ]; then
            echo "Repository deleted successfully."
          else
            echo "Failed to delete repository. HTTP status: $HTTP_STATUS"
            # Provide help for common failures
            if [ "$HTTP_STATUS" = "403" ]; then
              echo "403 Forbidden — ensure GH_PAT has the delete_repo scope and the actor has sufficient permissions."
            elif [ "$HTTP_STATUS" = "404" ]; then
              echo "404 Not Found — repository may not exist or token lacks access."
            fi
            exit 1
          fi
