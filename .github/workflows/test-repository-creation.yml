---
name: Test Repository Creation

on:
  workflow_dispatch:
    inputs:
      test_repo_name:
        description: "Name for test repository (will be prefixed with test-)"
        required: false
        default: "bootstrap-test"
        type: string
      languages:
        description: "Languages to test (comma-separated or 'all' or 'language-agnostic-only')"
        required: false
        default: "language-agnostic-only"
        type: string
      cleanup_after_test:
        description: "Automatically delete test repository after testing"
        required: false
        default: true
        type: boolean
      wait_time_minutes:
        description: "Minutes to wait before cleanup (to inspect results)"
        required: false
        default: "10"
        type: string

jobs:
  create-test-repo:
    name: Create Test Repository
    runs-on: ubuntu-latest
    outputs:
      test_repo_name: ${{ steps.generate-name.outputs.repo_name }}
      repo_created: ${{ steps.verify-repo.outputs.created }}
    permissions:
      contents: write
      id-token: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate unique test repository name
        id: generate-name
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          REPO_NAME="test-${{ github.event.inputs.test_repo_name }}-${TIMESTAMP}"
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "Generated test repository name: ${REPO_NAME}"

      - name: Trigger repository creation workflow
        id: trigger-workflow
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh workflow run create-repository.yml \
            --field repo_name="${{ steps.generate-name.outputs.repo_name }}" \
            --field repo_description="Test repository for bootstrap validation - created $(date)" \
            --field visibility="public" \
            --field enable_branch_protection="false" \
            --field team_name="* @${{ github.repository_owner }}" \
            --field license_holder="${{ github.repository_owner }}" \
            --field languages="${{ github.event.inputs.languages }}" \
            --field cleanup_on_failure="true"

          echo "workflow_triggered=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Monitor workflow execution
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        timeout-minutes: 10
        run: |
          echo "‚è≥ Monitoring create-repository workflow..."

          # Wait a moment for the workflow to be registered
          sleep 5

          # Poll for the workflow run
          for i in {1..60}; do
            # Get the latest workflow run for create-repository.yml
            RUN_STATUS=$(gh api \
              "/repos/${{ github.repository }}/actions/workflows/create-repository.yml/runs?per_page=1" \
              --jq '.workflow_runs[0] | {status: .status, conclusion: .conclusion, html_url: .html_url}')

            STATUS=$(echo "$RUN_STATUS" | jq -r '.status')
            CONCLUSION=$(echo "$RUN_STATUS" | jq -r '.conclusion')
            WORKFLOW_URL=$(echo "$RUN_STATUS" | jq -r '.html_url')

            echo "Workflow status: $STATUS, conclusion: $CONCLUSION"

            if [ "$STATUS" = "completed" ]; then
              if [ "$CONCLUSION" = "success" ]; then
                echo "‚úÖ Repository creation workflow completed successfully"
                echo "Workflow: $WORKFLOW_URL"
                break
              else
                echo "‚ùå Repository creation workflow failed with conclusion: $CONCLUSION"
                echo "Workflow: $WORKFLOW_URL"
                exit 1
              fi
            else
              echo "‚è≥ Workflow still running... (check $i/60)"
              sleep 10
            fi

            if [ $i -eq 60 ]; then
              echo "‚ùå Workflow monitoring timed out"
              echo "Workflow: $WORKFLOW_URL"
              exit 1
            fi
          done

      - name: Verify repository was created
        id: verify-repo
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_NAME="${{ steps.generate-name.outputs.repo_name }}"

          if gh repo view ${{ github.repository_owner }}/${REPO_NAME} &>/dev/null; then
            echo "‚úÖ Repository verified: https://github.com/${{ github.repository_owner }}/${REPO_NAME}"
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Repository not found after workflow completion"
            echo "created=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate repository structure
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_NAME="${{ steps.generate-name.outputs.repo_name }}"

          echo "üîç Validating repository structure..."

          # Check essential files exist
          REQUIRED_FILES=(
            ".github/workflows/super-linter.yml"
            ".github/CODEOWNERS"
            ".github/dependabot.yml"
            ".super-linter.env"
            ".editorconfig"
            ".gitignore"
            ".gitattributes"
            "README.md"
            "LICENSE"
            "Makefile"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if gh api "/repos/${{ github.repository_owner }}/${REPO_NAME}/contents/${file}" >/dev/null 2>&1; then
              echo "‚úÖ Found: ${file}"
            else
              echo "‚ùå Missing: ${file}"
              exit 1
            fi
          done

          echo "üéâ All required files are present!"

      - name: Check super-linter configuration
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_NAME="${{ steps.generate-name.outputs.repo_name }}"

          echo "üîç Checking super-linter configuration for languages: ${{ github.event.inputs.languages }}"

          # Get the .super-linter.env content
          LINTER_CONFIG=$(gh api "/repos/${{ github.repository_owner }}/${REPO_NAME}/contents/.super-linter.env" --jq '.content' | base64 -d)

          echo "Super-linter configuration:"
          echo "$LINTER_CONFIG"

          # Verify language-specific configuration (check for uncommented VALIDATE_* lines)
          LANGUAGES="${{ github.event.inputs.languages }}"

          if [ "$LANGUAGES" = "language-agnostic-only" ]; then
            # Should only have language-agnostic linters enabled
            if echo "$LINTER_CONFIG" | grep -q "^VALIDATE_EDITORCONFIG=true"; then
              echo "‚úÖ Language-agnostic linters enabled correctly"
            else
              echo "‚ùå Language-agnostic linters not configured properly"
              exit 1
            fi
          elif [ "$LANGUAGES" = "all" ]; then
            # Should have many languages enabled
            ENABLED_COUNT=$(echo "$LINTER_CONFIG" | grep -c "^VALIDATE_.*=true" || true)
            if [ $ENABLED_COUNT -ge 20 ]; then
              echo "‚úÖ All languages enabled correctly ($ENABLED_COUNT linters)"
            else
              echo "‚ùå Not enough linters enabled for 'all' option (only $ENABLED_COUNT)"
              exit 1
            fi
          else
            # Check specific languages from comma-separated list
            IFS=',' read -ra LANG_ARRAY <<< "$LANGUAGES"
            for lang in "${LANG_ARRAY[@]}"; do
              lang=$(echo "$lang" | xargs)  # trim whitespace
              case "$lang" in
                "javascript")
                  if echo "$LINTER_CONFIG" | grep -q "^VALIDATE_JAVASCRIPT_ES=true"; then
                    echo "‚úÖ JavaScript linting enabled"
                  else
                    echo "‚ùå JavaScript linting not enabled"
                    exit 1
                  fi
                  ;;
                "typescript")
                  if echo "$LINTER_CONFIG" | grep -q "^VALIDATE_TYPESCRIPT_ES=true"; then
                    echo "‚úÖ TypeScript linting enabled"
                  else
                    echo "‚ùå TypeScript linting not enabled"
                    exit 1
                  fi
                  ;;
                "python")
                  if echo "$LINTER_CONFIG" | grep -q "^VALIDATE_PYTHON_RUFF=true"; then
                    echo "‚úÖ Python linting enabled"
                  else
                    echo "‚ùå Python linting not enabled"
                    exit 1
                  fi
                  ;;
                "go")
                  if echo "$LINTER_CONFIG" | grep -q "^VALIDATE_GO=true"; then
                    echo "‚úÖ Go linting enabled"
                  else
                    echo "‚ùå Go linting not enabled"
                    exit 1
                  fi
                  ;;
                *)
                  echo "‚ÑπÔ∏è Validation not implemented for: $lang"
                  ;;
              esac
            done
          fi

      - name: Trigger super-linter workflow test
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_NAME="${{ steps.generate-name.outputs.repo_name }}"

          echo "üß™ Triggering super-linter workflow in test repository..."

          # Trigger the super-linter workflow in the test repo
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository_owner }}/${REPO_NAME}/actions/workflows/super-linter.yml/dispatches" \
            -f ref="main"

          echo "‚úÖ Super-linter workflow triggered. Check: https://github.com/${{ github.repository_owner }}/${REPO_NAME}/actions"

  cleanup-test-repo:
    name: Cleanup Test Repository
    needs: create-test-repo
    runs-on: ubuntu-latest
    # Only run if repo was actually created AND (user wants cleanup OR the creation job failed)
    if: ${{ always() && needs.create-test-repo.outputs.repo_created == 'true' && (github.event.inputs.cleanup_after_test == 'true' || needs.create-test-repo.result == 'failure') }}
    permissions:
      contents: write

    steps:
      - name: Wait before cleanup
        # Only wait if the creation job succeeded - skip wait on failures
        if: ${{ needs.create-test-repo.result == 'success' }}
        run: |
          WAIT_MINUTES="${{ github.event.inputs.wait_time_minutes }}"
          echo "‚è≥ Waiting ${WAIT_MINUTES} minutes before cleanup to allow inspection..."
          sleep $((WAIT_MINUTES * 60))

      - name: Delete test repository
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO_NAME="${{ needs.create-test-repo.outputs.test_repo_name }}"
          OWNER="${{ github.repository_owner }}"

          echo "üóëÔ∏è Cleaning up test repository: ${OWNER}/${REPO_NAME}"

          # Check if repository exists before attempting deletion
          if gh repo view "${OWNER}/${REPO_NAME}" &>/dev/null; then
            # Delete the repository directly
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              /repos/${OWNER}/${REPO_NAME}

            echo "‚úÖ Repository deleted successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è Repository does not exist or was already deleted" >> $GITHUB_STEP_SUMMARY
          fi
